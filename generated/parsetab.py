
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '6D79D3DAA4B7961EF9341A4E4378A7DE'
    
_lr_action_items = {'}':([19,30,35,38,54,60,],[-1,-2,41,43,57,61,]),'MUL_OP':([13,14,15,16,17,18,20,22,23,24,33,34,36,42,49,55,],[-18,25,-20,-19,25,25,-20,25,25,-16,-17,-15,25,-21,25,25,]),'{':([13,14,15,16,17,24,33,34,36,42,47,58,],[-18,26,-20,-19,29,-16,-17,-15,-14,-21,51,59,]),'WHILE':([0,19,26,29,51,59,],[4,4,4,4,4,4,]),'$end':([3,19,30,],[0,-1,-2,]),')':([13,15,16,23,24,33,34,36,42,56,],[-18,-20,-19,33,-16,-17,-15,-14,-21,58,]),'FOREACH':([10,],[21,]),'ADD_OP':([2,4,5,10,11,12,13,14,15,16,17,18,20,22,23,24,25,27,33,34,36,42,45,49,52,55,],[12,12,12,12,12,12,-18,27,-20,-19,27,27,-20,27,27,-16,12,12,-17,-15,-14,-21,12,27,12,27,]),'(':([2,4,5,10,11,12,21,25,27,45,52,],[11,11,11,11,11,11,32,11,11,11,11,]),'IF':([0,19,26,29,51,59,],[2,2,2,2,2,2,]),'ITER':([20,40,],[31,46,]),']':([15,16,37,42,],[-20,-19,42,-21,]),'[':([15,20,],[28,28,]),';':([6,7,8,9,13,15,16,18,20,22,24,33,34,36,41,42,43,49,55,57,61,],[-3,-5,-4,19,-18,-20,-19,-6,-20,-7,-16,-17,-15,-14,-12,-21,-11,-8,-9,-13,-10,]),'AS':([39,50,],[44,53,]),':':([15,16,39,42,48,],[-20,-19,45,-21,52,]),'=':([1,],[10,]),'IDENTIFIER':([0,2,4,5,10,11,12,19,25,26,27,28,29,31,32,44,45,46,51,52,53,59,],[1,15,15,15,20,15,15,1,15,1,15,15,1,39,40,15,15,50,1,15,15,1,]),'NUMBER':([2,4,5,10,11,12,25,27,28,44,45,52,53,],[16,16,16,16,16,16,16,16,16,16,16,16,16,]),'PRINT':([0,19,26,29,51,59,],[5,5,5,5,5,5,]),'ELSE':([41,],[47,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'assignation-valeur':([0,19,26,29,51,59,],[6,6,6,6,6,6,]),'expression':([2,4,5,10,11,12,25,27,45,52,],[14,17,18,22,23,24,34,36,49,55,]),'programme':([0,19,26,29,51,59,],[3,30,35,38,54,60,]),'structure':([0,19,26,29,51,59,],[7,7,7,7,7,7,]),'assignation-serie':([0,19,26,29,51,59,],[8,8,8,8,8,8,]),'statement':([0,19,26,29,51,59,],[9,9,9,9,9,9,]),'nombre':([2,4,5,10,11,12,25,27,28,44,45,52,53,],[13,13,13,13,13,13,13,13,37,48,13,13,56,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement ;','programme',2,'p_programme_statement','parser.py',9),
  ('programme -> statement ; programme','programme',3,'p_programme_recursive','parser.py',13),
  ('statement -> assignation-valeur','statement',1,'p_statement','parser.py',17),
  ('statement -> assignation-serie','statement',1,'p_statement','parser.py',18),
  ('statement -> structure','statement',1,'p_statement','parser.py',19),
  ('statement -> PRINT expression','statement',2,'p_statement_print','parser.py',23),
  ('assignation-valeur -> IDENTIFIER = expression','assignation-valeur',3,'p_assign_valeur','parser.py',27),
  ('assignation-serie -> IDENTIFIER = IDENTIFIER ITER IDENTIFIER : expression','assignation-serie',7,'p_assign_serie','parser.py',31),
  ('assignation-serie -> IDENTIFIER = IDENTIFIER ITER IDENTIFIER AS nombre : expression','assignation-serie',9,'p_assign_serie','parser.py',32),
  ('assignation-serie -> IDENTIFIER = FOREACH ( IDENTIFIER ITER IDENTIFIER AS nombre ) { programme }','assignation-serie',13,'p_assign_serie','parser.py',33),
  ('structure -> WHILE expression { programme }','structure',5,'p_structure','parser.py',37),
  ('structure -> IF expression { programme }','structure',5,'p_structure','parser.py',38),
  ('structure -> IF expression { programme } ELSE { programme }','structure',9,'p_structure','parser.py',39),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parser.py',43),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parser.py',44),
  ('expression -> ADD_OP expression','expression',2,'p_minus','parser.py',48),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parser.py',52),
  ('expression -> nombre','expression',1,'p_expression','parser.py',56),
  ('nombre -> NUMBER','nombre',1,'p_nombre','parser.py',60),
  ('nombre -> IDENTIFIER','nombre',1,'p_nombre','parser.py',61),
  ('nombre -> IDENTIFIER [ nombre ]','nombre',4,'p_nombre','parser.py',62),
]
