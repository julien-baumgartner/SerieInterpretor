
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '22E556C0CCF30707C5CCC8285BDA5BB1'
    
_lr_action_items = {'}':([10,19,34,36,53,54,],[-1,-2,40,42,55,56,]),'ITER':([30,44,],[39,39,]),'ADD_OP':([5,6,7,11,12,13,14,15,16,17,18,20,21,22,23,25,28,30,31,32,33,35,38,41,45,49,52,],[11,11,11,11,11,22,-19,-20,22,22,11,-17,22,11,11,11,22,-20,-18,-15,-16,22,11,-21,22,11,22,]),'{':([13,14,15,16,20,31,32,33,41,47,48,],[24,-19,-20,26,-17,-18,-15,-16,-21,50,51,]),'MUL_OP':([13,14,15,16,17,20,21,28,30,31,32,33,35,41,45,52,],[23,-19,-20,23,23,-17,23,23,-20,-18,23,-16,23,-21,23,23,]),')':([14,15,20,21,31,32,33,41,43,46,52,],[-19,-20,-17,31,-18,-15,-16,-21,48,-10,-11,]),'AS':([46,],[49,]),':':([14,15,20,29,31,32,33,41,46,52,],[-19,-20,-17,38,-18,-15,-16,-21,-10,-11,]),'IDENTIFIER':([0,5,6,7,10,11,12,18,22,23,24,25,26,37,38,39,49,50,51,],[9,15,15,15,9,15,15,30,15,15,9,15,9,44,15,46,15,9,9,]),'WHILE':([0,10,24,26,50,51,],[5,5,5,5,5,5,]),']':([14,15,20,31,32,33,35,41,],[-19,-20,-17,-18,-15,-16,41,-21,]),';':([1,2,3,4,14,15,17,20,28,30,31,32,33,40,41,42,45,55,56,],[-5,-4,10,-3,-19,-20,-6,-17,-7,-20,-18,-15,-16,-12,-21,-13,-8,-14,-9,]),'[':([15,30,],[25,25,]),'=':([9,],[18,]),'FOREACH':([18,],[27,]),'IF':([0,10,24,26,50,51,],[6,6,6,6,6,6,]),'$end':([8,10,19,],[0,-1,-2,]),'NUMBER':([5,6,7,11,12,18,22,23,25,38,49,],[14,14,14,14,14,14,14,14,14,14,14,]),'PRINT':([0,10,24,26,50,51,],[7,7,7,7,7,7,]),'ELSE':([42,],[47,]),'(':([5,6,7,11,12,18,22,23,25,27,38,49,],[12,12,12,12,12,12,12,12,12,37,12,12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'assignation-valeur':([0,10,24,26,50,51,],[4,4,4,4,4,4,]),'structure':([0,10,24,26,50,51,],[1,1,1,1,1,1,]),'assignation-serie':([0,10,24,26,50,51,],[2,2,2,2,2,2,]),'statement':([0,10,24,26,50,51,],[3,3,3,3,3,3,]),'expression':([5,6,7,11,12,18,22,23,25,38,49,],[13,16,17,20,21,28,32,33,35,45,52,]),'programme':([0,10,24,26,50,51,],[8,19,34,36,53,54,]),'def-iter':([18,37,],[29,43,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement ;','programme',2,'p_programme_statement','myparser.py',9),
  ('programme -> statement ; programme','programme',3,'p_programme_recursive','myparser.py',13),
  ('statement -> assignation-valeur','statement',1,'p_statement','myparser.py',17),
  ('statement -> assignation-serie','statement',1,'p_statement','myparser.py',18),
  ('statement -> structure','statement',1,'p_statement','myparser.py',19),
  ('statement -> PRINT expression','statement',2,'p_statement_print','myparser.py',23),
  ('assignation-valeur -> IDENTIFIER = expression','assignation-valeur',3,'p_assign_valeur','myparser.py',27),
  ('assignation-serie -> IDENTIFIER = def-iter : expression','assignation-serie',5,'p_assign_serie','myparser.py',31),
  ('assignation-serie -> IDENTIFIER = FOREACH ( def-iter ) { programme }','assignation-serie',9,'p_assign_serie','myparser.py',32),
  ('def-iter -> IDENTIFIER ITER IDENTIFIER','def-iter',3,'p_def_iter','myparser.py',40),
  ('def-iter -> IDENTIFIER ITER IDENTIFIER AS expression','def-iter',5,'p_def_iter','myparser.py',41),
  ('structure -> WHILE expression { programme }','structure',5,'p_structure','myparser.py',46),
  ('structure -> IF expression { programme }','structure',5,'p_structure','myparser.py',47),
  ('structure -> IF expression { programme } ELSE { programme }','structure',9,'p_structure','myparser.py',48),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','myparser.py',59),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','myparser.py',60),
  ('expression -> ADD_OP expression','expression',2,'p_minus','myparser.py',64),
  ('expression -> ( expression )','expression',3,'p_expression_paren','myparser.py',68),
  ('expression -> NUMBER','expression',1,'p_expression','myparser.py',72),
  ('expression -> IDENTIFIER','expression',1,'p_expression','myparser.py',73),
  ('expression -> IDENTIFIER [ expression ]','expression',4,'p_expression','myparser.py',74),
]
