
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '22E556C0CCF30707C5CCC8285BDA5BB1'
    
_lr_action_items = {'IDENTIFIER':([0,2,8,9,10,14,15,16,23,24,25,26,30,31,32,33,47,51,52,],[1,11,11,11,19,11,11,1,11,11,1,11,1,40,11,42,11,1,1,]),'[':([11,19,],[23,23,]),'(':([2,8,9,10,14,15,21,23,24,26,32,47,],[15,15,15,15,15,15,33,15,15,15,15,15,]),'WHILE':([0,16,25,30,51,52,],[2,2,2,2,2,2,]),'NUMBER':([2,8,9,10,14,15,23,24,26,32,47,],[13,13,13,13,13,13,13,13,13,13,13,]),'ITER':([19,42,],[31,31,]),'AS':([40,],[47,]),'ADD_OP':([2,8,9,10,11,12,13,14,15,17,18,19,22,23,24,26,27,28,32,34,35,37,38,41,44,47,50,],[14,14,14,14,-20,26,-19,14,14,26,26,-20,26,14,14,14,-17,26,14,26,-16,-15,-18,26,-21,14,26,]),'$end':([7,16,29,],[0,-1,-2,]),':':([11,13,20,27,35,37,38,40,44,50,],[-20,-19,32,-17,-16,-15,-18,-10,-21,-11,]),'MUL_OP':([11,12,13,17,18,19,22,27,28,34,35,37,38,41,44,50,],[-20,24,-19,24,24,-20,24,-17,24,24,-16,24,-18,24,-21,24,]),'}':([16,29,36,39,53,54,],[-1,-2,45,46,55,56,]),'FOREACH':([10,],[21,]),']':([11,13,27,34,35,37,38,44,],[-20,-19,-17,44,-16,-15,-18,-21,]),'{':([11,12,13,17,27,35,37,38,44,48,49,],[-20,25,-19,30,-17,-16,-15,-18,-21,51,52,]),'PRINT':([0,16,25,30,51,52,],[9,9,9,9,9,9,]),'IF':([0,16,25,30,51,52,],[8,8,8,8,8,8,]),';':([3,4,5,6,11,13,18,19,22,27,35,37,38,41,44,45,46,55,56,],[-4,-5,-3,16,-20,-19,-6,-20,-7,-17,-16,-15,-18,-8,-21,-12,-13,-9,-14,]),')':([11,13,27,28,35,37,38,40,43,44,50,],[-20,-19,-17,38,-16,-15,-18,-10,48,-21,-11,]),'=':([1,],[10,]),'ELSE':([46,],[49,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,16,25,30,51,52,],[7,29,36,39,53,54,]),'expression':([2,8,9,10,14,15,23,24,26,32,47,],[12,17,18,22,27,28,34,35,37,41,50,]),'assignation-serie':([0,16,25,30,51,52,],[3,3,3,3,3,3,]),'structure':([0,16,25,30,51,52,],[4,4,4,4,4,4,]),'def-iter':([10,33,],[20,43,]),'statement':([0,16,25,30,51,52,],[6,6,6,6,6,6,]),'assignation-valeur':([0,16,25,30,51,52,],[5,5,5,5,5,5,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement ;','programme',2,'p_programme_statement','myparser.py',9),
  ('programme -> statement ; programme','programme',3,'p_programme_recursive','myparser.py',13),
  ('statement -> assignation-valeur','statement',1,'p_statement','myparser.py',17),
  ('statement -> assignation-serie','statement',1,'p_statement','myparser.py',18),
  ('statement -> structure','statement',1,'p_statement','myparser.py',19),
  ('statement -> PRINT expression','statement',2,'p_statement_print','myparser.py',23),
  ('assignation-valeur -> IDENTIFIER = expression','assignation-valeur',3,'p_assign_valeur','myparser.py',27),
  ('assignation-serie -> IDENTIFIER = def-iter : expression','assignation-serie',5,'p_assign_serie','myparser.py',31),
  ('assignation-serie -> IDENTIFIER = FOREACH ( def-iter ) { programme }','assignation-serie',9,'p_assign_serie','myparser.py',32),
  ('def-iter -> IDENTIFIER ITER IDENTIFIER','def-iter',3,'p_def_iter','myparser.py',40),
  ('def-iter -> IDENTIFIER ITER IDENTIFIER AS expression','def-iter',5,'p_def_iter','myparser.py',41),
  ('structure -> WHILE expression { programme }','structure',5,'p_structure','myparser.py',46),
  ('structure -> IF expression { programme }','structure',5,'p_structure','myparser.py',47),
  ('structure -> IF expression { programme } ELSE { programme }','structure',9,'p_structure','myparser.py',48),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','myparser.py',59),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','myparser.py',60),
  ('expression -> ADD_OP expression','expression',2,'p_minus','myparser.py',64),
  ('expression -> ( expression )','expression',3,'p_expression_paren','myparser.py',68),
  ('expression -> NUMBER','expression',1,'p_expression','myparser.py',72),
  ('expression -> IDENTIFIER','expression',1,'p_expression','myparser.py',73),
  ('expression -> IDENTIFIER [ expression ]','expression',4,'p_expression','myparser.py',74),
]
